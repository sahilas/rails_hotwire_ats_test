(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.mrujsPlugins = {}));
})(this, (function (exports) { 'use strict';

    class CableCar {
        constructor(cableReady, { mimeType } = {}) {
            this.cableReady = cableReady;
            this.mimeType = (mimeType !== null && mimeType !== void 0 ? mimeType : 'application/vnd.cable-ready.json');
            this.boundPerform = this.perform.bind(this);
        }
        get name() {
            return 'CableCar';
        }
        initialize() {
            const anyHeader = window.mrujs.mimeTypes.any;
            window.mrujs.registerMimeTypes([
                { shortcut: 'any', header: `${this.mimeType}, ${anyHeader}` },
                { shortcut: 'cablecar', header: this.mimeType }
            ]);
        }
        connect() {
            document.addEventListener('ajax:beforeNavigation', this.boundPerform);
        }
        disconnect() {
            document.removeEventListener('ajax:beforeNavigation', this.boundPerform);
        }
        perform(event) {
            const fetchResponse = event.detail.fetchResponse;
            if ((fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.contentType) == null)
                return;
            if (!this.isCableReadyResponse(fetchResponse.contentType))
                return;
            event.preventDefault();
            fetchResponse.json().then((response) => {
                this.cableReady.perform(response);
            }).catch((err) => {
                console.error(err);
            });
        }
        isCableReadyResponse(contentType) {
            return Boolean(contentType.includes(this.mimeType));
        }
    }

    function JsErb() {
        const name = 'JsErb';
        return {
            name,
            initialize: initialize$1,
            connect: connect$2,
            disconnect: disconnect$2
        };
    }
    function initialize$1() {
        const { script, any } = window.mrujs.mimeTypes;
        window.mrujs.registerMimeTypes([
            { shortcut: 'any', header: `${script}, ${any}` }
        ]);
    }
    function connect$2() {
        document.addEventListener('ajax:complete', injectScriptIntoHead);
    }
    function disconnect$2() {
        document.removeEventListener('ajax:complete', injectScriptIntoHead);
    }
    function injectScriptIntoHead(event) {
        var _a, _b, _c, _d;
        if (!isJavascriptResponse((_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse) === null || _b === void 0 ? void 0 : _b.contentType))
            return;
        // https://github.com/rails/rails/blob/fa1a4b657c7167a8671a359a55de3f9b37f4330b/actionview/app/assets/javascripts/rails-ujs/utils/ajax.coffee#L13
        const script = document.createElement('script');
        const csp = window.mrujs.cspNonce();
        if (csp != null)
            script.setAttribute('nonce', csp);
        window.mrujs.enableElement(event);
        (_d = (_c = event.detail) === null || _c === void 0 ? void 0 : _c.fetchResponse) === null || _d === void 0 ? void 0 : _d.text().then((html) => {
            var _a, _b;
            script.text = html;
            (_b = (_a = document.head.appendChild(script)) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(script);
            const { element, fetchRequest, fetchResponse } = event.detail;
            // @ts-expect-error
            window.mrujs.navigationAdapter.navigate(element, fetchRequest, fetchResponse);
            // ^ not sure this is actually needed, but we'll leave it just in case.
        }).catch((err) => console.error(err));
    }
    function isJavascriptResponse(contentType) {
        if (contentType == null)
            return false;
        return Boolean(contentType.match(/\b(?:java|ecma)script\b/));
    }

    function MrujsTurbo() {
        return {
            name: 'MrujsTurbo',
            initialize,
            connect: connect$1,
            disconnect: disconnect$1
        };
    }
    const mimeType = 'text/vnd.turbo-stream.html';
    function initialize() {
        const anyHeader = window.mrujs.mimeTypes.any;
        window.mrujs.registerMimeTypes([
            { shortcut: 'any', header: `${mimeType}, ${anyHeader}` },
            { shortcut: 'turbo', header: mimeType }
        ]);
    }
    function connect$1() {
        document.addEventListener('ajax:beforeNavigation', handleTurboStream);
    }
    function disconnect$1() {
        document.removeEventListener('ajax:beforeNavigation', handleTurboStream);
    }
    function handleTurboStream(event) {
        const fetchResponse = event.detail.fetchResponse;
        if (fetchResponse == null)
            return;
        if (!isTurboResponse(fetchResponse.contentType))
            return;
        event.preventDefault(); // => stop the navigationAdapter from trying to handle it.
        fetchResponse.html().then((responseHtml) => {
            // @ts-expect-error
            window.Turbo.renderStreamMessage(responseHtml);
        }).catch((err) => {
            console.error(err);
        });
    }
    function isTurboResponse(contentType) {
        return Boolean(contentType.includes(mimeType));
    }

    function Shoelace() {
        return {
            name: 'Shoelace',
            connect,
            disconnect
        };
    }
    function connect() {
        document.addEventListener('sl-submit', shoelaceFormListener);
    }
    function disconnect() {
        document.removeEventListener('sl-submit', shoelaceFormListener);
    }
    function shoelaceFormListener(event) {
        var _a, _b, _c;
        const form = event.target;
        const formData = event.detail.formData;
        const action = form.getAttribute('action');
        let method = form.getAttribute('method');
        if (action == null) {
            console.warn("No 'action' attribute on your Shoelace form. Aborting...");
            return;
        }
        if (method == null)
            method = 'get';
        const mrujs = () => window.mrujs;
        (_c = (_b = (_a = mrujs()) === null || _a === void 0 ? void 0 : _a.fetch(action, {
            element: form,
            dispatchEvents: true,
            method: method,
            body: mrujs().urlEncodeFormData(formData)
        })) === null || _b === void 0 ? void 0 : _b.then(() => { })) === null || _c === void 0 ? void 0 : _c.catch((err) => console.warn(err));
    }

    exports.CableCar = CableCar;
    exports.JsErb = JsErb;
    exports.MrujsTurbo = MrujsTurbo;
    exports.Shoelace = Shoelace;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=plugins.umd.js.map
