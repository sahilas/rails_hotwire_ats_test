import { EventQueryInterface, QuerySelectorInterface, SelectorType } from '../../types';
export declare function toArray<T>(value: any): T[];
/**
 * Checks if the given native dom element matches the selector
 * @example
 *   matches(document.querySelector("form"), { selector: "form", exclude: "form[data-remote='true']"})
 *   matches(document.querySelector("form"), "form")
 */
export declare function matches(element: Node | Element, selector: SelectorType): boolean;
export declare const BASE_SELECTORS: QuerySelectorInterface;
export declare function addListeners(conditions: EventQueryInterface[], callbacks: EventListener[]): void;
export declare function removeListeners(conditions: EventQueryInterface[], callbacks: EventListener[]): void;
export declare function attachObserverCallback(conditions: EventQueryInterface[], nodeList: Node[], callbacks: EventListener[]): void;
/**
 * Helper function that returns form elements that match the specified CSS selector
 *   If form is actually a "form" element this will return associated elements outside the from that have
 *   the html form attribute set
 */
export declare function formElements(form: HTMLElement, selector: SelectorType): HTMLFormElement[];
export declare function $(selector: string): Element[];
export declare function selectorToString(selector: SelectorType): string;
//# sourceMappingURL=dom.d.ts.map