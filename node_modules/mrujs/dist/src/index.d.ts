import './polyfills';
import { Mrujs } from './mrujs';
import { Adapter, MrujsInterface } from '../types';
declare global {
    interface Window {
        SubmitEvent: typeof Event;
        mrujs: MrujsInterface;
        Rails: MrujsInterface;
        Turbolinks?: Adapter;
        Turbo?: Adapter;
    }
}
declare const mrujs: MrujsInterface;
export { mrujs, Mrujs };
export default mrujs;
export declare const $: (selector: string) => Element[], CSRFProtection: (request: Request) => void, buttonClickSelector: import("../types").SelectorType, buttonDisableSelector: import("../types").SelectorType, cspNonce: () => string | undefined, csrfParam: () => string | undefined, csrfToken: () => string | undefined, confirm: (message: string) => boolean, delegate: (element: Element, selector: import("../types").SelectorType, eventType: string, handler: Function) => void, disableElement: (event: import("../types").Submitter | Event | HTMLFormElement) => void, enableElement: (trigger: HTMLElement | Event) => void, fileInputSelector: import("../types").SelectorType, fire: (element: EventTarget, name: string, options: CustomEventInit<any>) => boolean, formDisableSelector: import("../types").SelectorType, formElements: (form: HTMLElement, selector: import("../types").SelectorType) => HTMLFormElement[], formEnableSelector: import("../types").SelectorType, formInputClickSelector: import("../types").SelectorType, formSubmitSelector: import("../types").SelectorType, handleConfirm: (event: Event) => void, handleDisabledElement: (this: HTMLFormElement, event: Event) => void, handleMethod: (event: Event) => void, inputChangeSelector: import("../types").SelectorType, linkClickSelector: import("../types").SelectorType, linkDisableSelector: import("../types").SelectorType, matches: (element: Element | Node, selector: import("../types").SelectorType) => boolean, preventInsignificantClick: (event: MouseEvent) => void, refreshCSRFTokens: () => void, start: (this: MrujsInterface, config?: Partial<MrujsInterface> | undefined) => MrujsInterface, stopEverything: (event: Event) => void, FetchResponse: (response: Response) => import("../types").FetchResponseInterface, FetchRequest: (input: import("../types").Locateable | Request, options: RequestInit) => import("../types").FetchRequestInterface;
//# sourceMappingURL=index.d.ts.map